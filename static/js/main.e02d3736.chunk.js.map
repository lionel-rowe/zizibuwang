{"version":3,"sources":["lib/search.js","lib/handle-query-params.js","App.js","serviceWorker.js","index.js"],"names":["search","query","data","a","conditions","split","filter","el","trim","startsWith","map","toCondition","length","RangeError","searchWorker","Worker","postMessage","type","entries","Promise","resolve","reject","onmessage","error","terminate","results","setTimeout","clause","matcher","matches","match","SyntaxError","groups","SAMPLES","theme","createMuiTheme","palette","JSON","parse","_dbIsLoaded","alasql","promise","_allRows","all","getAllRows","window","localStorage","dbSeeded","console","info","reseedDb","App","useState","setResults","loading","setLoading","useEffect","num","URLSearchParams","location","get","preset","document","querySelector","textContent","handleQueryParams","submitForm","e","preventDefault","FormData","currentTarget","Swal","fire","text","message","icon","ThemeProvider","style","color","textAlign","padding","Typography","variant","component","Container","maxWidth","marginTop","onSubmit","FormControl","margin","fullWidth","TextField","id","InputProps","fontFamily","label","multiline","autoComplete","autoCorrect","autoCapitalize","spellCheck","name","placeholder","Button","whiteSpace","className","display","justifyContent","CircularProgress","zoom","slice","trad","simp","pinyin","def","Fragment","key","opacity","Link","target","rel","href","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e02d3736.chunk.js","sourcesContent":["const config = {\n  MAX_TIMEOUT: 3000,\n};\n\nconst { MAX_TIMEOUT } = config;\n\nconst search = async (query, data) => {\n  let error, results;\n\n  try {\n    const conditions = query\n      .split(/\\r?\\n/)\n      .filter(el => el && el.trim() && !el.trim().startsWith('#'))\n      .map(toCondition);\n\n    if (!conditions.length) {\n      throw new RangeError('Must have at last one condition');\n    }\n\n    const searchWorker = new Worker('/search-worker.js');\n\n    searchWorker.postMessage({\n      type: 'SEARCH',\n      conditions: conditions,\n      entries: data,\n    });\n\n    results = await new Promise((resolve, reject) => {\n      searchWorker.onmessage = ({ data }) => {\n        if (data.type === 'ERROR') {\n          reject(data.error);\n        }\n\n        searchWorker.terminate();\n\n        resolve(data.results);\n      }\n\n      setTimeout(() => {\n        searchWorker.terminate();\n\n        reject('Timeout exceeded');\n      }, MAX_TIMEOUT);\n\n    });\n  } catch (e) {\n    error = e;\n  }\n\n  return { results, error };\n};\n\n\nfunction toCondition(clause) {\n  const matcher = /^(?<prop>\\S+)\\s+(?<method>\\S+)\\s+(?<arg>.+)$/;\n\n  const matches = clause.trim().match(matcher);\n\n  if (!matches) {\n    throw new SyntaxError('Each condition must be formatted as \"prop method arg\"');\n  }\n\n  return { ...matches.groups };\n}\n\nexport { search };\n","const SAMPLES = [\n  `# traditional identical to simplified\n\ntrad sameas simp\ntrad minlength 2\ntrad !match \\\\P{Script=Han}`,\n\n  `# 不...不 pattern with syllable li3 or li4\n\nsimp match 不.不\nsimp length 4\npinyin imatch \\\\bli[34]`,\n\n  `# fuzzy match on xian2 xiao4\n\npinyin imatch ^(?:sh?[ea]|xia)ng?[12] xiao4$`,\n\n  `# fuzzy match on xiao4 er2 bu4 yu3\n\npinyin imatch ^(?:xi|sh)ao4 er2 bu4 y[ui][23]$`,\n\n  `# 班门弄斧\n\npinyin icontains ban1\nsimp contains 斧\nsimp length 4`,\n\n  `# triplicate characters\n\nsimp match (.)\\\\1\\\\1`,\n\n  `# 说曹操……\n\nsimp match (..)，\\\\1`,\n];\n\nconst handleQueryParams = () => {\n  const num = new URLSearchParams(window.location.search).get('preset') | 0;\n\n  const preset = num && SAMPLES[num - 1];\n\n  if (preset) {\n    document.querySelector('#search-conditions').textContent = preset;\n  }\n};\n\nexport { handleQueryParams };\n","import React, { useState, useEffect } from 'react';\nimport { Container, Typography, Button, TextField, FormControl, Link, CircularProgress } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport alasql from 'alasql';\nimport { search } from './lib/search';\nimport { handleQueryParams } from './lib/handle-query-params';\nimport Swal from 'sweetalert2'\n\nconst theme = createMuiTheme({\n  palette: JSON.parse(`{\"common\":{\"black\":\"#000\",\"white\":\"#fff\"},\"type\":\"dark\",\"primary\":{\"main\":\"#357\",\"light\":\"rgb(91,119,146)\",\"dark\":\"rgb(35,59,83)\",\"contrastText\":\"#fff\"},\"secondary\":{\"main\":\"#26c6dd\",\"light\":\"rgb(81,209,227)\",\"dark\":\"rgb(26,138,154)\",\"contrastText\":\"rgba(0,0,0,0.87)\"},\"error\":{\"light\":\"#e57373\",\"main\":\"#f44336\",\"dark\":\"#d32f2f\",\"contrastText\":\"#fff\"},\"warning\":{\"light\":\"#ffb74d\",\"main\":\"#ff9800\",\"dark\":\"#f57c00\",\"contrastText\":\"rgba(0,0,0,0.87)\"},\"info\":{\"light\":\"#64b5f6\",\"main\":\"#2196f3\",\"dark\":\"#1976d2\",\"contrastText\":\"#fff\"},\"success\":{\"light\":\"#81c784\",\"main\":\"#4caf50\",\"dark\":\"#388e3c\",\"contrastText\":\"rgba(0,0,0,0.87)\"},\"grey\":{\"50\":\"#fafafa\",\"100\":\"#f5f5f5\",\"200\":\"#eeeeee\",\"300\":\"#e0e0e0\",\"400\":\"#bdbdbd\",\"500\":\"#9e9e9e\",\"600\":\"#757575\",\"700\":\"#616161\",\"800\":\"#424242\",\"900\":\"#212121\",\"A100\":\"#d5d5d5\",\"A200\":\"#aaaaaa\",\"A400\":\"#303030\",\"A700\":\"#616161\"},\"contrastThreshold\":3,\"tonalOffset\":0.2,\"text\":{\"primary\":\"#fff\",\"secondary\":\"rgba(255,255,255,0.7)\",\"disabled\":\"rgba(255,255,255,0.5)\",\"hint\":\"rgba(255,255,255,0.5)\",\"icon\":\"rgba(255,255,255,0.5)\"},\"divider\":\"rgba(255,255,255,0.12)\",\"background\":{\"paper\":\"#424242\",\"default\":\"#121212\",\"level2\":\"#333\",\"level1\":\"#212121\"},\"action\":{\"active\":\"#fff\",\"hover\":\"rgba(255,255,255,0.08)\",\"hoverOpacity\":0.08,\"selected\":\"rgba(255,255,255,0.16)\",\"selectedOpacity\":0.16,\"disabled\":\"rgba(255,255,255,0.3)\",\"disabledBackground\":\"rgba(255,255,255,0.12)\",\"disabledOpacity\":0.38,\"focus\":\"rgba(255,255,255,0.12)\",\"focusOpacity\":0.12,\"activatedOpacity\":0.24}}`),\n});\n\nconst _dbIsLoaded = new Promise(async (resolve) => {\n  await alasql.promise(`CREATE INDEXEDDB DATABASE IF NOT EXISTS dict_data;\n  ATTACH INDEXEDDB DATABASE dict_data;\n  USE dict_data;`);\n\n  resolve(0);\n});\n\nconst _allRows = new Promise(async (resolve) => {\n  await _dbIsLoaded;\n\n  const all = await alasql.promise('SELECT * FROM cedict')\n\n  resolve(all);\n});\n\nconst getAllRows = async () => {\n  const data = await _allRows;\n\n  return data;\n};\n\nwindow.alasql = alasql;\n\nconst reseedDb = async () => {\n  if (localStorage.dbSeeded) {\n    return;\n  }\n\n  await _dbIsLoaded;\n\n  // casting is necessary to avoid type coercion to number on certain records\n  const data = await alasql.promise(`SELECT\n    CAST(trad as STRING) as trad,\n    CAST(simp as STRING) as simp,\n    CAST(pinyin as STRING) as pinyin,\n    CAST(def as STRING) as def\n    FROM TSV(\"cc-cedict.tsv\", {headers:true});`);\n\n  await alasql.promise(`DROP INDEXEDDB DATABASE IF EXISTS dict_data;`);\n\n  await alasql.promise('DROP TABLE IF EXISTS cedict;');\n\n  await alasql.promise(`CREATE TABLE cedict\n    (trad string,\n    simp string,\n    pinyin string,\n    def string,\n    PRIMARY KEY (trad, simp, pinyin));`);\n\n  await alasql.promise('SELECT * INTO cedict FROM ?', [data]);\n\n  console.info('db seeded');\n  localStorage.dbSeeded = true;\n};\n\nreseedDb();\n\nwindow.getAllRows = getAllRows;\n\nconst App = () => {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    handleQueryParams();\n  }, []);\n\n  const submitForm = async e => {\n    e.preventDefault();\n\n    setResults([]);\n    setLoading(true);\n\n    const query = new FormData(e.currentTarget).get('search-conditions');\n\n    const data = await getAllRows();\n\n    const { results, error } = await search(query, data);\n\n    if (error) {\n      Swal.fire({ text: error.message, icon: 'error' });\n\n      setLoading(false);\n      setResults([]);\n    } else {\n      setLoading(false);\n      setResults(results);\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <header style={{\n        color: 'antiquewhite',\n        textAlign: 'center',\n        padding: '2em'\n      }}>\n        <Typography variant=\"h1\" component=\"h1\">字字不忘</Typography>\n      </header>\n      <main>\n        <Container maxWidth=\"sm\">\n          <form style={{marginTop: '1em'}} onSubmit={submitForm}>\n            <FormControl style={{margin: '1em 0'}} fullWidth>\n              <TextField id=\"search-conditions\" InputProps={{style: {fontFamily: 'Consolas, monospace'}}} label=\"Search query\" variant=\"filled\" multiline autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" name=\"search-conditions\" placeholder=\"Syntax: prop method arg\"></TextField>\n            </FormControl>\n            <FormControl style={{margin: '1em 0'}}>\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Search\n              </Button>\n            </FormControl>\n          </form>\n          <pre style={{whiteSpace: 'pre-wrap'}}><output className=\"output\">{\n            loading\n              ? <div style={{ display: 'flex', justifyContent: 'center' }}>\n                  <CircularProgress style={{zoom: 1.2}} color=\"secondary\" />\n                </div>\n              : results.slice(0, 100).map(({trad, simp, pinyin, def}) => {\n                return <React.Fragment key={`${trad} ${simp} [${pinyin}]`}>\n                  {`${trad} ${simp} [${pinyin}] /${def}/\\n\\n`}\n                </React.Fragment>;\n              })\n          }</output></pre>\n        </Container>\n      </main>\n      <footer>\n        <Container maxWidth=\"sm\" style={{marginTop: '2em'}}>\n          <hr style={{opacity: 0.3}} />\n          <Typography variant=\"body1\" component=\"p\">\n            Data from <Link target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cc-cedict.org/wiki/\">CC-CEDICT</Link> (<Link target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC BY-SA 3.0</Link>).\n          </Typography>\n        </Container>\n      </footer>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}